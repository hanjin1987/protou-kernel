From 875205dd7ba78a747c57e5195e84015592037c11 Mon Sep 17 00:00:00 2001
From: Aparna Mallavarapu <aparnam@codeaurora.org>
Date: Tue, 9 Oct 2012 16:10:24 +0530
Subject: [PATCH 03/75] msm_fb: Add support for Truly HX8389B panel

Add support for Truly HX8389B panel drivers and display
board file support for SKUD prime target.

Change-Id: Ibb94cc7a1077f22f00dce0952f34583ebe95a670
Signed-off-by: Aparna Mallavarapu <aparnam@codeaurora.org>
---
 arch/arm/mach-msm/board-msm7627a-display.c    |  132 ++++++++-
 drivers/video/msm/Kconfig                     |   16 +
 drivers/video/msm/Makefile                    |    3 +
 drivers/video/msm/mipi_hx8389b.c              |  383 +++++++++++++++++++++++++
 drivers/video/msm/mipi_hx8389b.h              |   20 ++
 drivers/video/msm/mipi_hx8389b_cmd_qhd_pt.c   |   98 +++++++
 drivers/video/msm/mipi_hx8389b_video_qhd_pt.c |  108 +++++++
 7 files changed, 750 insertions(+), 10 deletions(-)
 create mode 100644 drivers/video/msm/mipi_hx8389b.c
 create mode 100644 drivers/video/msm/mipi_hx8389b.h
 create mode 100644 drivers/video/msm/mipi_hx8389b_cmd_qhd_pt.c
 create mode 100644 drivers/video/msm/mipi_hx8389b_video_qhd_pt.c

diff --git a/arch/arm/mach-msm/board-msm7627a-display.c b/arch/arm/mach-msm/board-msm7627a-display.c
index 78a24fd..e4003e7 100644
--- a/arch/arm/mach-msm/board-msm7627a-display.c
+++ b/arch/arm/mach-msm/board-msm7627a-display.c
@@ -510,10 +510,12 @@ static int msm_fb_detect_panel(const char *name)
 		if (!strncmp(name, "lcdc_truly_hvga_ips3p2335_pt", 28))
 			ret = 0;
 	} else if (machine_is_msm7627a_evb() || machine_is_msm8625_evb() ||
-			machine_is_msm8625_evt() ||
-			machine_is_qrd_skud_prime()) {
+			machine_is_msm8625_evt()) {
 		if (!strncmp(name, "mipi_cmd_nt35510_wvga", 21))
 			ret = 0;
+	} else if (machine_is_qrd_skud_prime()) {
+		if (!strncmp(name, "mipi_video_hx8389b_qhd", 22))
+			ret = 0;
 	}
 
 #if !defined(CONFIG_FB_MSM_LCDC_AUTO_DETECT) && \
@@ -721,6 +723,19 @@ static struct platform_device mipi_dsi_NT35510_panel_device = {
 	}
 };
 
+static struct msm_panel_common_pdata mipi_hx8389b_pdata = {
+	.backlight    = evb_backlight_control,
+	.rotate_panel = NULL,
+};
+
+static struct platform_device mipi_dsi_hx8389b_panel_device = {
+	.name = "mipi_hx8389b",
+	.id   = 0,
+	.dev  = {
+		.platform_data = &mipi_hx8389b_pdata,
+	}
+};
+
 static struct msm_panel_common_pdata mipi_NT35516_pdata = {
 	.backlight = evb_backlight_control,
 };
@@ -760,6 +775,11 @@ static struct platform_device *evb_fb_devices[] __initdata = {
 	&mipi_dsi_NT35516_panel_device,
 };
 
+static struct platform_device *skud_fb_devices[] __initdata = {
+	&msm_fb_device,
+	&mipi_dsi_hx8389b_panel_device,
+};
+
 void __init msm_msm7627a_allocate_memory_regions(void)
 {
 	void *addr;
@@ -983,6 +1003,27 @@ static int msm_fb_dsi_client_qrd3_reset(void)
 	return rc;
 }
 
+#define GPIO_SKUD_LCD_BRDG_RESET_N	78
+
+static unsigned skud_mipi_dsi_gpio[] = {
+	GPIO_CFG(GPIO_SKUD_LCD_BRDG_RESET_N, 0, GPIO_CFG_OUTPUT,
+			GPIO_CFG_NO_PULL,
+			GPIO_CFG_2MA), /* GPIO_SKUD_LCD_BRDG_RESET_N */
+};
+
+static int msm_fb_dsi_client_skud_reset(void)
+{
+	int rc = 0;
+
+	rc = gpio_request(GPIO_SKUD_LCD_BRDG_RESET_N, "skud_lcd_brdg_reset_n");
+	if (rc < 0) {
+		pr_err("failed to request skud lcd brdg reset_n\n");
+		return rc;
+	}
+
+	return rc;
+}
+
 static int msm_fb_dsi_client_reset(void)
 {
 	int rc = 0;
@@ -990,9 +1031,10 @@ static int msm_fb_dsi_client_reset(void)
 	if (machine_is_msm7627a_qrd1())
 		rc = msm_fb_dsi_client_qrd1_reset();
 	else if (machine_is_msm7627a_evb() || machine_is_msm8625_evb()
-						|| machine_is_msm8625_evt()
-						|| machine_is_qrd_skud_prime())
+						|| machine_is_msm8625_evt())
 		rc = msm_fb_dsi_client_qrd3_reset();
+	else if (machine_is_qrd_skud_prime())
+		rc = msm_fb_dsi_client_skud_reset();
 	else
 		rc = msm_fb_dsi_client_msm_reset();
 
@@ -1292,6 +1334,69 @@ static int mipi_dsi_panel_qrd3_power(int on)
 	return rc;
 }
 
+static int skud_dsi_gpio_initialized;
+static int mipi_dsi_panel_skud_power(int on)
+{
+	int rc = 0;
+
+	if (!skud_dsi_gpio_initialized) {
+		pmapp_disp_backlight_init();
+
+		skud_dsi_gpio_initialized = 1;
+
+		if (mdp_pdata.cont_splash_enabled) {
+			/*Configure LCD Bridge reset*/
+			rc = gpio_tlmm_config(skud_mipi_dsi_gpio[0],
+			     GPIO_CFG_ENABLE);
+			if (rc < 0) {
+				pr_err("Failed to enable LCD Bridge reset enable\n");
+				return rc;
+			}
+
+			rc = gpio_direction_output(GPIO_SKUD_LCD_BRDG_RESET_N,
+									1);
+
+			if (rc < 0) {
+				pr_err("Failed GPIO bridge Reset\n");
+				gpio_free(GPIO_SKUD_LCD_BRDG_RESET_N);
+				return rc;
+			}
+			return 0;
+		}
+	}
+
+	if (on) {
+		/*Configure LCD Bridge reset*/
+		rc = gpio_tlmm_config(skud_mipi_dsi_gpio[0], GPIO_CFG_ENABLE);
+		if (rc < 0) {
+			pr_err("Failed to enable LCD Bridge reset enable\n");
+			return rc;
+		}
+
+		rc = gpio_direction_output(GPIO_SKUD_LCD_BRDG_RESET_N, 1);
+
+		if (rc < 0) {
+			pr_err("Failed GPIO bridge Reset\n");
+			gpio_free(GPIO_SKUD_LCD_BRDG_RESET_N);
+			return rc;
+		}
+
+		/*Toggle Bridge Reset GPIO*/
+		msleep(20);
+		gpio_set_value_cansleep(GPIO_SKUD_LCD_BRDG_RESET_N, 0);
+		msleep(20);
+		gpio_set_value_cansleep(GPIO_SKUD_LCD_BRDG_RESET_N, 1);
+		msleep(20);
+
+	} else {
+		gpio_tlmm_config(GPIO_CFG(GPIO_SKUD_LCD_BRDG_RESET_N, 0,
+			GPIO_CFG_INPUT, GPIO_CFG_NO_PULL, GPIO_CFG_2MA),
+			GPIO_CFG_DISABLE);
+	}
+
+	return rc;
+}
+
 static char mipi_dsi_splash_is_enabled(void);
 static int mipi_dsi_panel_power(int on)
 {
@@ -1300,9 +1405,10 @@ static int mipi_dsi_panel_power(int on)
 	if (machine_is_msm7627a_qrd1())
 		rc = mipi_dsi_panel_qrd1_power(on);
 	else if (machine_is_msm7627a_evb() || machine_is_msm8625_evb()
-						|| machine_is_msm8625_evt()
-						|| machine_is_qrd_skud_prime())
+						|| machine_is_msm8625_evt())
 		rc = mipi_dsi_panel_qrd3_power(on);
+	else if (machine_is_qrd_skud_prime())
+		rc = mipi_dsi_panel_skud_power(on);
 	else
 		rc = mipi_dsi_panel_msm_power(on);
 	return rc;
@@ -1354,6 +1460,10 @@ void msm7x27a_set_display_params(char *prim_panel)
 			strnlen("mipi_video_nt35510_wvga",
 				PANEL_NAME_MAX_LEN)))
 			disable_splash = 1;
+
+	if (machine_is_qrd_skud_prime())
+		disable_splash = 1;
+
 	}
 }
 
@@ -1365,8 +1475,7 @@ void __init msm_fb_add_devices(void)
 		platform_add_devices(qrd_fb_devices,
 				ARRAY_SIZE(qrd_fb_devices));
 	else if (machine_is_msm7627a_evb() || machine_is_msm8625_evb()
-					|| machine_is_msm8625_evt()
-					|| machine_is_qrd_skud_prime()) {
+						|| machine_is_msm8625_evt()) {
 		mipi_NT35510_pdata.bl_lock = 1;
 		mipi_NT35516_pdata.bl_lock = 1;
 		if (disable_splash)
@@ -1380,6 +1489,10 @@ void __init msm_fb_add_devices(void)
 		mdp_pdata.cont_splash_enabled = 0x0;
 		platform_add_devices(qrd3_fb_devices,
 						ARRAY_SIZE(qrd3_fb_devices));
+	} else if (machine_is_qrd_skud_prime()) {
+		mdp_pdata.cont_splash_enabled = 0x0;
+		platform_add_devices(skud_fb_devices,
+				ARRAY_SIZE(skud_fb_devices));
 	} else {
 		mdp_pdata.cont_splash_enabled = 0x0;
 		platform_add_devices(msm_fb_devices,
@@ -1395,8 +1508,7 @@ void __init msm_fb_add_devices(void)
 	msm_fb_register_device("mipi_dsi", &mipi_dsi_pdata);
 #endif
 	if (machine_is_msm7627a_evb() || machine_is_msm8625_evb()
-					|| machine_is_msm8625_evt()
-					|| machine_is_qrd_skud_prime()) {
+					|| machine_is_msm8625_evt()) {
 		gpio_reg_2p85v = regulator_get(&mipi_dsi_device.dev,
 								"lcd_vdd");
 		if (IS_ERR(gpio_reg_2p85v))
diff --git a/drivers/video/msm/Kconfig b/drivers/video/msm/Kconfig
index 54d7090..9ae0b7e 100644
--- a/drivers/video/msm/Kconfig
+++ b/drivers/video/msm/Kconfig
@@ -202,6 +202,10 @@ config FB_MSM_MIPI_DSI_NT35510
 	bool
 	select FB_MSM_MIPI_DSI
 
+config FB_MSM_MIPI_DSI_HX8389B
+	bool
+	select FB_MSM_MIPI_DSI
+
 config FB_MSM_MIPI_DSI_ORISE
         bool
         select FB_MSM_MIPI_DSI
@@ -367,6 +371,11 @@ config FB_MSM_MIPI_NT35510_CMD_WVGA_PT
 	select FB_MSM_MIPI_DSI_NT35510
 	default n
 
+config FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT
+	bool
+	select FB_MSM_MIPI_DSI_HX8389B
+	default n
+
 config FB_MSM_MIPI_NT35516_VIDEO_QHD_PT
         bool
         select FB_MSM_MIPI_DSI_NT35516
@@ -550,6 +559,7 @@ config FB_MSM_MIPI_PANEL_DETECT
 	select FB_MSM_MIPI_NOVATEK_CMD_QHD_PT
 	select FB_MSM_MIPI_NT35510_VIDEO_WVGA_PT
 	select FB_MSM_MIPI_NT35510_CMD_WVGA_PT
+	select FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT
 	select FB_MSM_MIPI_ORISE_VIDEO_720P_PT
 	select FB_MSM_MIPI_ORISE_CMD_720P_PT
 	select FB_MSM_MIPI_NT35516_VIDEO_QHD_PT
@@ -592,6 +602,7 @@ config FB_MSM_LCDC_MIPI_PANEL_AUTO_DETECT
 	select FB_MSM_MIPI_NOVATEK_CMD_QHD_PT
 	select FB_MSM_MIPI_NT35510_VIDEO_WVGA_PT
 	select FB_MSM_MIPI_NT35510_CMD_WVGA_PT
+	select FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT
 	select FB_MSM_MIPI_NT35516_VIDEO_QHD_PT
 	select FM_MSM_MIPI_NT35516_CMD_QHD_PT
 	select FB_MSM_MIPI_SIMULATOR_VIDEO
@@ -612,6 +623,7 @@ config FB_MSM_LVDS_MIPI_PANEL_DETECT
 	select FB_MSM_MIPI_NOVATEK_CMD_QHD_PT
 	select FB_MSM_MIPI_NT35510_VIDEO_WVGA_PT
 	select FB_MSM_MIPI_NT35510_CMD_WVGA_PT
+	select FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT
 	select FB_MSM_MIPI_ORISE_VIDEO_720P_PT
 	select FB_MSM_MIPI_ORISE_CMD_720P_PT
 	select FB_MSM_MIPI_SIMULATOR_VIDEO
@@ -706,6 +718,10 @@ config FB_MSM_MIPI_NT35510_CMD_WVGA_PT_PANEL
 	bool "MIPI NT35510 Command WVGA PT Panel"
 	select FB_MSM_MIPI_NT35510_CMD_WVGA_PT
 
+config FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT_PANEL
+	bool "MIPI HX8389B Video QHD PT Panel"
+	select FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT
+
 config FB_MSM_MIPI_NT35516_VIDEO_QHD_PT_PANEL
         bool "MIPI NT35516 Video qHD PT Panel"
         select FB_MSM_MIPI_NT35516_VIDEO_QHD_PT
diff --git a/drivers/video/msm/Makefile b/drivers/video/msm/Makefile
index a0f9e02..c4b7086 100644
--- a/drivers/video/msm/Makefile
+++ b/drivers/video/msm/Makefile
@@ -82,6 +82,7 @@ obj-$(CONFIG_FB_MSM_MIPI_DSI_ORISE) += mipi_orise.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_RENESAS) += mipi_renesas.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_TRULY) += mipi_truly.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_NT35510) += mipi_NT35510.o
+obj-$(CONFIG_FB_MSM_MIPI_DSI_HX8389B) += mipi_hx8389b.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_NT35516) += mipi_truly_tft540960_1_e.o
 obj-$(CONFIG_FB_MSM_MIPI_DSI_SIMULATOR) += mipi_simulator.o
 
@@ -125,6 +126,7 @@ obj-y += mipi_novatek_video_qhd_pt.o mipi_novatek_cmd_qhd_pt.o
 obj-y += mipi_orise_video_720p_pt.o mipi_orise_cmd_720p_pt.o
 obj-y += mipi_renesas_video_fwvga_pt.o mipi_renesas_cmd_fwvga_pt.o
 obj-y += mipi_NT35510_video_wvga_pt.o mipi_NT35510_cmd_wvga_pt.o
+obj-y += mipi_hx8389b_video_qhd_pt.o
 obj-y += mipi_truly_tft540960_1_e_video_qhd_pt.o mipi_truly_tft540960_1_e_cmd_qhd_pt.o
 obj-y += mipi_chimei_wxga_pt.o
 obj-y += mipi_chimei_wuxga.o
@@ -143,6 +145,7 @@ obj-$(CONFIG_FB_MSM_MIPI_RENESAS_VIDEO_FWVGA_PT) += mipi_renesas_video_fwvga_pt.
 obj-$(CONFIG_FB_MSM_MIPI_TRULY_VIDEO_WVGA_PT) += mipi_truly_video_wvga_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_NT35510_CMD_WVGA_PT) += mipi_NT35510_cmd_wvga_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_NT35510_VIDEO_WVGA_PT) += mipi_NT35510_video_wvga_pt.o
+obj-$(CONFIG_FB_MSM_MIPI_HX8389B_VIDEO_QHD_PT) += mipi_hx8389b_video_qhd_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_NT35516_CMD_QHD_PT) += mipi_truly_tft540960_1_e_cmd_qhd_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_NT35516_VIDEO_QHD_PT) += mipi_truly_tft540960_1_e_video_qhd_pt.o
 obj-$(CONFIG_FB_MSM_MIPI_SIMULATOR_VIDEO) += mipi_simulator_video.o
diff --git a/drivers/video/msm/mipi_hx8389b.c b/drivers/video/msm/mipi_hx8389b.c
new file mode 100644
index 0000000..2649327
--- /dev/null
+++ b/drivers/video/msm/mipi_hx8389b.c
@@ -0,0 +1,383 @@
+/* Copyright (c) 2012, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+#define DEBUG
+
+#include <mach/socinfo.h>
+
+#include "msm_fb.h"
+#include <linux/gpio.h>
+#include "mipi_dsi.h"
+#include "mipi_hx8389b.h"
+
+static struct msm_panel_common_pdata *mipi_hx8389b_pdata;
+static struct dsi_buf hx8389b_tx_buf;
+static struct dsi_buf hx8389b_rx_buf;
+
+static int mipi_hx8389b_bl_ctrl;
+
+
+/* common setting */
+static char exit_sleep[2] = {0x11, 0x00};
+static char display_on[2] = {0x29, 0x00};
+static char display_off[2] = {0x28, 0x00};
+static char enter_sleep[2] = {0x10, 0x00};
+
+static char video0[] = {
+	0xB9, 0xFF, 0x83, 0x89,
+};
+static char video1[] = {
+	0xb1, 0x00, 0x00, 0x04,
+	0xe8, 0x50, 0x10, 0x11,
+	0xb0, 0xf0, 0x2b, 0x33,
+	0x1a, 0x1a, 0x43, 0x01,
+	0x58, 0xf2, 0x00, 0xe6,
+};
+static char video2[] = {
+	0xb2, 0x00, 0x00, 0x78,
+	0x0c, 0x07, 0x00, 0x30
+};
+static char video3[] = {
+	0xb4, 0x80, 0x08, 0x00,
+	0x32, 0x10, 0x04, 0x32,
+	0x10, 0x00, 0x32, 0x10,
+	0x00, 0x37, 0x0a, 0x40,
+	0x08, 0x37, 0x0a, 0x40,
+	0x14, 0x46, 0x50, 0x0a,
+};
+static char video4[] = {
+	0xd5, 0x00, 0x00, 0x00,
+	0x00, 0x01, 0x00, 0x00,
+	0x00, 0x60, 0x00, 0x88,
+	0x88, 0x88, 0x88, 0x88,
+	0x23, 0x88, 0x01, 0x88,
+	0x67, 0x88, 0x45, 0x01,
+	0x23, 0x88, 0x88, 0x88,
+	0x88, 0x88, 0x88, 0x88,
+	0x88, 0x88, 0x88, 0x54,
+	0x88, 0x76, 0x88, 0x10,
+	0x88, 0x32, 0x32, 0x10,
+	0x88, 0x88, 0x88, 0x88,
+	0x88, 0x00, 0x00, 0x00,
+	0x00, 0x00, 0x00, 0x00,
+	0x00,
+};
+static char video5[] = {
+	0xcb, 0x07, 0x07,
+};
+static char video6[] = {
+	0xbb, 0x00, 0x00, 0xff,
+	0x80,
+};
+
+static char video7[] = {0xDE, 0x05, 0x58};
+
+static char video8[] = {
+	0xb6, 0x00, 0xa4, 0x00,
+	0xa4,
+};
+
+static char video9[] = {
+	0xe0, 0x05, 0x07, 0x16,
+	0x2d, 0x2b, 0x3f, 0x39,
+	0x4c, 0x06, 0x12, 0x18,
+	0x19, 0x1a, 0x17, 0x18,
+	0x10, 0x16, 0x05, 0x07,
+	0x16, 0x2d, 0x2b, 0x3f,
+	0x39, 0x4c, 0x06, 0x12,
+	0x18, 0x19, 0x1a, 0x17,
+	0x18, 0x10, 0x16,
+};
+
+static char video10[] = {
+	0xc1, 0x01, 0x03, 0x05,
+	0x0d, 0x16, 0x1C, 0x27,
+	0x31, 0x38, 0x43, 0x4b,
+	0x56, 0x60, 0x6a, 0x74,
+	0x7D, 0x87, 0x8f, 0x97,
+	0x9e, 0xa8, 0xb1, 0xba,
+	0xc2, 0xca, 0xd1, 0xd9,
+	0xe0, 0xe4, 0xea, 0xf1,
+	0xf5, 0xfb, 0xff, 0x00,
+	0x15, 0x2a, 0xec, 0x0d,
+	0x49, 0x4a, 0x45, 0x00,
+	0x00, 0x03, 0x0a, 0x12,
+	0x19, 0x1f, 0x2a, 0x32,
+	0x39, 0x42, 0x4a, 0x54,
+	0x5D, 0x66, 0x6f, 0x78,
+	0x80, 0x88, 0x8f, 0x96,
+	0x9f, 0xa7, 0xb0, 0xb8,
+	0xc1, 0xc9, 0xd1, 0xda,
+	0xe2, 0xe7, 0xef, 0xf7,
+	0xfd, 0x52, 0xdb, 0xa9,
+	0x54, 0x57, 0x16, 0x64,
+	0x56, 0x80, 0x01, 0x01,
+	0x07, 0x0f, 0x17, 0x1b,
+	0x26, 0x2c, 0x34, 0x3b,
+	0x43, 0x4b, 0x54, 0x5d,
+	0x66, 0x6f, 0x78, 0x80,
+	0x88, 0x90, 0x96, 0x9a,
+	0xa3, 0xab, 0xb4, 0xbd,
+	0xc6, 0xce, 0xd7, 0xe1,
+	0xe7, 0xf2, 0xfe, 0x00,
+	0x23, 0x08, 0xbe, 0x7a,
+	0xe7, 0xe2, 0x3e, 0x80,
+};
+
+static char video11[] = {0x21, 0x00};
+
+static struct dsi_cmd_desc hx8389b_video_display_on_cmds[] = {
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video0), video0},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video1), video1},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video2), video2},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video3), video3},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video4), video4},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video5), video5},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video6), video6},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video7), video7},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video8), video8},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video9), video9},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video10), video10},
+	{DTYPE_DCS_LWRITE, 1, 0, 0, 10, sizeof(video11), video11},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 150, sizeof(exit_sleep), exit_sleep},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 150, sizeof(display_on), display_on},
+};
+
+static struct dsi_cmd_desc hx8389b_video_display_off_cmds[] = {
+	{DTYPE_DCS_WRITE, 1, 0, 0, 10, sizeof(display_off), display_off},
+	{DTYPE_DCS_WRITE, 1, 0, 0, 120, sizeof(enter_sleep), enter_sleep}
+};
+
+static int mipi_hx8389b_lcd_on(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+	struct mipi_panel_info *mipi;
+
+	mfd = platform_get_drvdata(pdev);
+	if (!mfd)
+		return -ENODEV;
+
+	if (mfd->key != MFD_KEY)
+		return -EINVAL;
+
+	mipi  = &mfd->panel_info.mipi;
+
+	if (!mfd->cont_splash_done) {
+		mfd->cont_splash_done = 1;
+		return 0;
+	}
+
+	if (mipi->mode == DSI_VIDEO_MODE)
+		mipi_dsi_cmds_tx(&hx8389b_tx_buf,
+			hx8389b_video_display_on_cmds,
+			ARRAY_SIZE(hx8389b_video_display_on_cmds));
+
+	return 0;
+}
+
+static int mipi_hx8389b_lcd_off(struct platform_device *pdev)
+{
+	struct msm_fb_data_type *mfd;
+	struct mipi_panel_info *mipi;
+
+	mfd = platform_get_drvdata(pdev);
+
+	if (!mfd)
+		return -ENODEV;
+	if (mfd->key != MFD_KEY)
+		return -EINVAL;
+
+	mipi  = &mfd->panel_info.mipi;
+
+	if (mipi->mode == DSI_VIDEO_MODE)
+		mipi_dsi_cmds_tx(&hx8389b_tx_buf,
+			hx8389b_video_display_off_cmds,
+			ARRAY_SIZE(hx8389b_video_display_off_cmds));
+	return 0;
+}
+
+static ssize_t mipi_hx8389b_wta_bl_ctrl(struct device *dev,
+	struct device_attribute *attr, const char *buf, size_t count)
+{
+	ssize_t ret = strnlen(buf, PAGE_SIZE);
+	int err;
+
+	err =  kstrtoint(buf, 0, &mipi_hx8389b_bl_ctrl);
+	if (err)
+		return ret;
+
+	pr_info("%s: bl ctrl set to %d\n", __func__, mipi_hx8389b_bl_ctrl);
+
+	return ret;
+}
+
+static DEVICE_ATTR(bl_ctrl, S_IWUSR, NULL, mipi_hx8389b_wta_bl_ctrl);
+
+static struct attribute *mipi_hx8389b_fs_attrs[] = {
+	&dev_attr_bl_ctrl.attr,
+	NULL,
+};
+
+static struct attribute_group mipi_hx8389b_fs_attr_group = {
+	.attrs = mipi_hx8389b_fs_attrs,
+};
+
+static int mipi_hx8389b_create_sysfs(struct platform_device *pdev)
+{
+	int rc;
+	struct msm_fb_data_type *mfd = platform_get_drvdata(pdev);
+
+	if (!mfd) {
+		pr_err("%s: mfd not found\n", __func__);
+		return -ENODEV;
+	}
+	if (!mfd->fbi) {
+		pr_err("%s: mfd->fbi not found\n", __func__);
+		return -ENODEV;
+	}
+	if (!mfd->fbi->dev) {
+		pr_err("%s: mfd->fbi->dev not found\n", __func__);
+		return -ENODEV;
+	}
+	rc = sysfs_create_group(&mfd->fbi->dev->kobj,
+		&mipi_hx8389b_fs_attr_group);
+	if (rc) {
+		pr_err("%s: sysfs group creation failed, rc=%d\n",
+			__func__, rc);
+		return rc;
+	}
+
+	return 0;
+}
+
+static int __devinit mipi_hx8389b_lcd_probe(struct platform_device *pdev)
+{
+	struct platform_device *pthisdev = NULL;
+	pr_debug("%s\n", __func__);
+
+	if (pdev->id == 0) {
+		mipi_hx8389b_pdata = pdev->dev.platform_data;
+		if (mipi_hx8389b_pdata->bl_lock)
+			spin_lock_init(&mipi_hx8389b_pdata->bl_spinlock);
+
+		mipi_hx8389b_bl_ctrl = 1;
+
+		return 0;
+	}
+
+	pthisdev = msm_fb_add_device(pdev);
+	mipi_hx8389b_create_sysfs(pthisdev);
+
+	return 0;
+}
+
+static struct platform_driver this_driver = {
+	.probe  = mipi_hx8389b_lcd_probe,
+	.driver = {
+		.name   = "mipi_hx8389b",
+	},
+};
+
+static int old_bl_level;
+
+static void mipi_hx8389b_set_backlight(struct msm_fb_data_type *mfd)
+{
+	int bl_level;
+	unsigned long flags;
+	bl_level = mfd->bl_level;
+
+	if (mipi_hx8389b_pdata->bl_lock) {
+		if (!mipi_hx8389b_bl_ctrl) {
+			/* Level received is of range 1 to bl_max,
+			   We need to convert the levels to 1
+			   to 31 */
+			bl_level = (2 * bl_level * 31 + mfd->panel_info.bl_max)
+					/(2 * mfd->panel_info.bl_max);
+			if (bl_level == old_bl_level)
+				return;
+
+			if (bl_level == 0)
+				mipi_hx8389b_pdata->backlight(0, 1);
+
+			if (old_bl_level == 0)
+				mipi_hx8389b_pdata->backlight(50, 1);
+
+			spin_lock_irqsave(&mipi_hx8389b_pdata->bl_spinlock,
+						flags);
+			mipi_hx8389b_pdata->backlight(bl_level, 0);
+			spin_unlock_irqrestore(&mipi_hx8389b_pdata->bl_spinlock,
+						flags);
+			old_bl_level = bl_level;
+		} else {
+			mipi_hx8389b_pdata->backlight(bl_level, 1);
+		}
+	} else {
+		mipi_hx8389b_pdata->backlight(bl_level, mipi_hx8389b_bl_ctrl);
+	}
+}
+
+static struct msm_fb_panel_data hx8389b_panel_data = {
+	.on	= mipi_hx8389b_lcd_on,
+	.off = mipi_hx8389b_lcd_off,
+	.set_backlight = mipi_hx8389b_set_backlight,
+};
+
+static int ch_used[3];
+
+static int mipi_hx8389b_lcd_init(void)
+{
+	mipi_dsi_buf_alloc(&hx8389b_tx_buf, DSI_BUF_SIZE);
+	mipi_dsi_buf_alloc(&hx8389b_rx_buf, DSI_BUF_SIZE);
+
+	return platform_driver_register(&this_driver);
+}
+int mipi_hx8389b_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel)
+{
+	struct platform_device *pdev = NULL;
+	int ret;
+
+	if ((channel >= 3) || ch_used[channel])
+		return -ENODEV;
+
+	ch_used[channel] = TRUE;
+
+	ret = mipi_hx8389b_lcd_init();
+	if (ret) {
+		pr_err("mipi_hx8389b_lcd_init() failed with ret %u\n", ret);
+		return ret;
+	}
+
+	pdev = platform_device_alloc("mipi_hx8389b", (panel << 8)|channel);
+	if (!pdev)
+		return -ENOMEM;
+
+	hx8389b_panel_data.panel_info = *pinfo;
+	ret = platform_device_add_data(pdev, &hx8389b_panel_data,
+				sizeof(hx8389b_panel_data));
+	if (ret) {
+		pr_debug("%s: platform_device_add_data failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	ret = platform_device_add(pdev);
+	if (ret) {
+		pr_debug("%s: platform_device_register failed!\n", __func__);
+		goto err_device_put;
+	}
+
+	return 0;
+
+err_device_put:
+	platform_device_put(pdev);
+	return ret;
+}
diff --git a/drivers/video/msm/mipi_hx8389b.h b/drivers/video/msm/mipi_hx8389b.h
new file mode 100644
index 0000000..db53632
--- /dev/null
+++ b/drivers/video/msm/mipi_hx8389b.h
@@ -0,0 +1,20 @@
+/* Copyright (c) 2012, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#ifndef MIPI_HX8389B_H
+#define MIPI_HX8389B_H
+
+int mipi_hx8389b_device_register(struct msm_panel_info *pinfo,
+					u32 channel, u32 panel);
+
+#endif  /* MIPI_HX8389B_H */
diff --git a/drivers/video/msm/mipi_hx8389b_cmd_qhd_pt.c b/drivers/video/msm/mipi_hx8389b_cmd_qhd_pt.c
new file mode 100644
index 0000000..800814b
--- /dev/null
+++ b/drivers/video/msm/mipi_hx8389b_cmd_qhd_pt.c
@@ -0,0 +1,98 @@
+/* Copyright (c) 2012, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_hx8389b.h"
+
+static struct msm_panel_info pinfo;
+
+static struct mipi_dsi_phy_ctrl dsi_cmd_mode_phy_db = {
+	/* DSI Bit Clock at 500 MHz, 2 lane, RGB888 */
+	/* regulator */
+	{0x03, 0x01, 0x01, 0x00},
+	/* timing   */
+	{0xb9, 0x8e, 0x1f, 0x00, 0x98, 0x9c, 0x22, 0x90,
+	0x18, 0x03, 0x04},
+	/* phy ctrl */
+	{0x7f, 0x00, 0x00, 0x00},
+	/* strength */
+	{0xbb, 0x02, 0x06, 0x00},
+	/* pll control */
+	{0x01, 0xec, 0x31, 0xd2, 0x00, 0x40, 0x37, 0x62,
+	0x01, 0x0f, 0x07,
+	0x05, 0x14, 0x03, 0x0, 0x0, 0x0, 0x20, 0x0, 0x02, 0x0},
+};
+
+static int mipi_cmd_hx8389b_qhd_pt_init(void)
+{
+	int ret;
+
+	if (msm_fb_detect_client("mipi_cmd_hx8389b_qhd"))
+		return 0;
+
+	pinfo.xres = 540;
+	pinfo.yres = 960;
+	pinfo.type = MIPI_CMD_PANEL;
+	pinfo.pdest = DISPLAY_1;
+	pinfo.wait_cycle = 0;
+	pinfo.bpp = 24;
+	pinfo.lcdc.h_back_porch = 100;
+	pinfo.lcdc.h_front_porch = 100;
+	pinfo.lcdc.h_pulse_width = 8;
+	pinfo.lcdc.v_back_porch = 20;
+	pinfo.lcdc.v_front_porch = 20;
+	pinfo.lcdc.v_pulse_width = 1;
+
+	pinfo.lcdc.border_clr = 0;	/* blk */
+	pinfo.lcdc.underflow_clr = 0xff;	/* blue */
+	pinfo.lcdc.hsync_skew = 0;
+	pinfo.bl_max = 255;
+	pinfo.bl_min = 1;
+	pinfo.fb_num = 2;
+
+	pinfo.clk_rate = 499000000;
+
+	pinfo.lcd.vsync_enable = TRUE;
+	pinfo.lcd.hw_vsync_mode = TRUE;
+	pinfo.lcd.refx100 = 6200; /* adjust refx100 to prevent tearing */
+
+	pinfo.mipi.mode = DSI_CMD_MODE;
+	pinfo.mipi.dst_format = DSI_CMD_DST_FORMAT_RGB888;
+	pinfo.mipi.vc = 0;
+	pinfo.mipi.rgb_swap = DSI_RGB_SWAP_RGB;
+	pinfo.mipi.data_lane0 = TRUE;
+	pinfo.mipi.data_lane1 = TRUE;
+	pinfo.mipi.t_clk_post = 0x20;
+	pinfo.mipi.t_clk_pre = 0x2F;
+	pinfo.mipi.stream = 0; /* dma_p */
+	pinfo.mipi.mdp_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.dma_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.te_sel = 1; /* TE from vsync gpio */
+	pinfo.mipi.interleave_max = 1;
+	pinfo.mipi.insert_dcs_cmd = TRUE;
+	pinfo.mipi.wr_mem_continue = 0x3c;
+	pinfo.mipi.wr_mem_start = 0x2c;
+	pinfo.mipi.dsi_phy_db = &dsi_cmd_mode_phy_db;
+	pinfo.mipi.tx_eot_append = 0x01;
+	pinfo.mipi.rx_eot_ignore = 0x0;
+	pinfo.mipi.dlane_swap = 0x01;
+
+	ret = mipi_hx8389b_device_register(&pinfo, MIPI_DSI_PRIM,
+						MIPI_DSI_PANEL_WVGA_PT);
+	if (ret)
+		pr_err("%s: failed to register device!\n", __func__);
+
+	return ret;
+}
+
+module_init(mipi_cmd_hx8389b_qhd_pt_init);
diff --git a/drivers/video/msm/mipi_hx8389b_video_qhd_pt.c b/drivers/video/msm/mipi_hx8389b_video_qhd_pt.c
new file mode 100644
index 0000000..a483d8e
--- /dev/null
+++ b/drivers/video/msm/mipi_hx8389b_video_qhd_pt.c
@@ -0,0 +1,108 @@
+/* Copyright (c) 2012, The Linux Foundation. All rights reserved.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 and
+ * only version 2 as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ */
+
+#include "msm_fb.h"
+#include "mipi_dsi.h"
+#include "mipi_hx8389b.h"
+
+static struct msm_panel_info pinfo;
+
+static struct mipi_dsi_phy_ctrl dsi_video_mode_phy_db = {
+	/* DSI Bit Clock at 500 MHz, 2 lane, RGB888 */
+	/* regulator */
+	{0x03, 0x01, 0x01, 0x00},
+	/* timing   */
+	{0xb9, 0x8e, 0x1f, 0x00, 0x98, 0x9c, 0x22, 0x90,
+	0x18, 0x03, 0x04},
+	/* phy ctrl */
+	{0x7f, 0x00, 0x00, 0x00},
+	/* strength */
+	{0xbb, 0x02, 0x06, 0x00},
+	/* pll control */
+	{0x01, 0xbb, 0x31, 0xd2, 0x00, 0x40, 0x37, 0x62,
+	0x01, 0x0f, 0x07,
+	0x05, 0x14, 0x03, 0x0, 0x0, 0x0, 0x20, 0x0, 0x02, 0x0},
+};
+
+static int mipi_video_hx8389b_qhd_pt_init(void)
+{
+	int ret;
+
+	if (msm_fb_detect_client("mipi_video_hx8389b_qhd"))
+		return 0;
+
+	pinfo.xres = 540;
+	pinfo.yres = 960;
+	pinfo.type = MIPI_VIDEO_PANEL;
+	pinfo.pdest = DISPLAY_1;
+	pinfo.wait_cycle = 0;
+	pinfo.bpp = 24;
+	pinfo.lcdc.h_back_porch = 55;
+	pinfo.lcdc.h_front_porch = 105;
+	pinfo.lcdc.h_pulse_width = 8;
+	pinfo.lcdc.v_back_porch = 15;
+	pinfo.lcdc.v_front_porch = 20;
+	pinfo.lcdc.v_pulse_width = 1;
+	pinfo.lcdc.border_clr = 0;	/* blk */
+	pinfo.lcdc.underflow_clr = 0xff;	/* blue */
+	/* number of dot_clk cycles HSYNC active edge is
+	delayed from VSYNC active edge */
+	pinfo.lcdc.hsync_skew = 0;
+	pinfo.clk_rate = 499000000;
+	pinfo.bl_max = 255;
+	pinfo.bl_min = 1;
+	pinfo.fb_num = 2;
+
+	pinfo.mipi.mode = DSI_VIDEO_MODE;
+	/* send HSA and HE following VS/VE packet */
+	pinfo.mipi.pulse_mode_hsa_he = TRUE;
+	pinfo.mipi.hfp_power_stop = TRUE; /* LP-11 during the HFP period */
+	pinfo.mipi.hbp_power_stop = TRUE; /* LP-11 during the HBP period */
+	pinfo.mipi.hsa_power_stop = TRUE; /* LP-11 during the HSA period */
+	/* LP-11 or let Command Mode Engine send packets in
+	HS or LP mode for the BLLP of the last line of a frame */
+	pinfo.mipi.eof_bllp_power_stop = TRUE;
+	/* LP-11 or let Command Mode Engine send packets in
+	HS or LP mode for packets sent during BLLP period */
+	pinfo.mipi.bllp_power_stop = TRUE;
+
+	pinfo.mipi.traffic_mode = DSI_BURST_MODE;
+	pinfo.mipi.dst_format =  DSI_VIDEO_DST_FORMAT_RGB888;
+	pinfo.mipi.vc = 0;
+	pinfo.mipi.rgb_swap = DSI_RGB_SWAP_RGB; /* RGB */
+	pinfo.mipi.data_lane0 = TRUE;
+	pinfo.mipi.data_lane1 = TRUE;
+
+	pinfo.mipi.t_clk_post = 0x3;
+	pinfo.mipi.t_clk_pre = 0x24;
+
+	pinfo.mipi.stream = 0; /* dma_p */
+	pinfo.mipi.mdp_trigger = DSI_CMD_TRIGGER_NONE;
+	pinfo.mipi.dma_trigger = DSI_CMD_TRIGGER_SW;
+	pinfo.mipi.frame_rate = 55; /* FIX ME */
+
+	pinfo.mipi.dsi_phy_db = &dsi_video_mode_phy_db;
+	pinfo.mipi.dlane_swap = 0x01;
+	/* append EOT at the end of data burst */
+	pinfo.mipi.tx_eot_append = 0x01;
+
+	ret = mipi_hx8389b_device_register(&pinfo, MIPI_DSI_PRIM,
+						MIPI_DSI_PANEL_QHD_PT);
+
+	if (ret)
+		pr_err("%s: failed to register device!\n", __func__);
+
+	return ret;
+}
+
+module_init(mipi_video_hx8389b_qhd_pt_init);
-- 
1.7.0.4

