From 79bdc5c9d26b994ba478e232721008793ff9735e Mon Sep 17 00:00:00 2001
From: Tirupathi Reddy <tirupath@codeaurora.org>
Date: Fri, 9 Nov 2012 21:29:26 +0530
Subject: [PATCH 37/75] msm: Shared regulator handle for cpr and acpuclock

In 8625Q, external buck regulator drives the power for apps core.
CPR and acpuclock driver are the consumers of external buck
regulator. But the voltage recommendations given by them are
mutually exclusive. Regulator cann't handle such a situation.
A shared regulator handle between cpr and acpuclock driver
can solve such a situation.

Change-Id: I55b8aec61efe83aab175d7db1f082b2b477919ab
Signed-off-by: Tirupathi Reddy <tirupath@codeaurora.org>
---
 arch/arm/mach-msm/acpuclock-8625q.c |    5 +++++
 arch/arm/mach-msm/msm_cpr.c         |    5 ++++-
 2 files changed, 9 insertions(+), 1 deletions(-)

diff --git a/arch/arm/mach-msm/acpuclock-8625q.c b/arch/arm/mach-msm/acpuclock-8625q.c
index 570b728..628f71b 100644
--- a/arch/arm/mach-msm/acpuclock-8625q.c
+++ b/arch/arm/mach-msm/acpuclock-8625q.c
@@ -52,6 +52,8 @@
 /* Max CPU frequency allowed by hardware while in standby waiting for an irq. */
 #define MAX_WAIT_FOR_IRQ_KHZ 128000
 
+struct regulator *ncp6335d_handle;
+
 /**
  * enum - For acpuclock PLL IDs
  */
@@ -707,6 +709,9 @@ static int __init get_reg(void)
 	int res = 0;
 
 	drv_state.vreg_cpu = regulator_get(NULL, "vddx_cx");
+
+	ncp6335d_handle = drv_state.vreg_cpu;
+
 	if (IS_ERR(drv_state.vreg_cpu)) {
 		res = PTR_ERR(drv_state.vreg_cpu);
 		pr_err("could not get regulator: %d\n", res);
diff --git a/arch/arm/mach-msm/msm_cpr.c b/arch/arm/mach-msm/msm_cpr.c
index fbcc868..6faeac7 100644
--- a/arch/arm/mach-msm/msm_cpr.c
+++ b/arch/arm/mach-msm/msm_cpr.c
@@ -57,6 +57,8 @@ static bool disable_cpr;
 module_param(enable, bool, 0644);
 MODULE_PARM_DESC(enable, "CPR Enable");
 
+extern struct regulator *ncp6335d_handle;
+
 static int msm_cpr_debug_mask;
 module_param_named(
 	debug_mask, msm_cpr_debug_mask, int, S_IRUGO | S_IWUSR
@@ -983,7 +985,8 @@ static int __devinit msm_cpr_probe(struct platform_device *pdev)
 	spin_lock_init(&cpr->cpr_lock);
 
 	/* Initialize the Voltage domain for CPR */
-	cpr->vreg_cx = regulator_get(&pdev->dev, "vddx_cx");
+	cpr->vreg_cx = ncp6335d_handle;
+
 	if (IS_ERR(cpr->vreg_cx)) {
 		res = PTR_ERR(cpr->vreg_cx);
 		pr_err("could not get regulator: %d\n", res);
-- 
1.7.0.4

